name: Build & Release (.NET)
# Builds and packages the app for multiple platforms and publishes a GitHub Release
# Triggered automatically on version tags (v*.*.*) or manually with workflow_dispatch

on:
  push:
    tags:
      - 'v*.*.*'                             # Trigger on semantic version tags (e.g., v1.0.0)
  workflow_dispatch:                         # Allow manual trigger
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        runtime: [ osx-arm64, osx-x64, linux-arm64, linux-x64, win-arm64, win-x64 ]  # Build for multiple OS runtimes
    steps:
      - name: Checkout repository           # Pull repo code
        uses: actions/checkout@v4

      - name: Setup .NET                    # Install .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies          # Restore NuGet packages
        run: dotnet restore       
        working-directory: ./src 

      - name: Publish self-contained app (macOS/Windows)
        if: startsWith(matrix.runtime, 'osx') || startsWith(matrix.runtime, 'win')
        run: dotnet publish ./SubtitleTools/SubtitleTools.csproj -c Release -r ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -o ../publish/${{ matrix.runtime }}
        working-directory: ./src

      - name: Publish framework-dependent app (Linux)
        if: startsWith(matrix.runtime, 'linux')
        run: dotnet publish ./SubtitleTools/SubtitleTools.csproj -c Release -r ${{ matrix.runtime }} --self-contained true -o ../publish/${{ matrix.runtime }}
        working-directory: ./src

      - name: Copy LICENSE to publish directory
        run: |
          if [ -f LICENSE ]; then
            cp LICENSE ./publish/${{ matrix.runtime }}/
            echo "LICENSE file copied to publish directory"
          else
            echo "WARNING: LICENSE file not found in root directory"
          fi

      - name: Ad-hoc sign macOS binaries
        if: startsWith(matrix.runtime, 'osx')
        run: |
          echo "Looking for executables in ./publish/${{ matrix.runtime }}/"
          find "./publish/${{ matrix.runtime }}" -type f ! -name '*.dll' ! -name '*.pdb' ! -name '*.xml' ! -name '*.config' | while read -r f; do
            if file "$f" | grep -q "Mach-O"; then
              echo "Signing executable: $f"
              codesign --force --deep --sign - "$f"
              echo "Verifying signature:"
              codesign -dv --verbose=2 "$f" || true
            else
              echo "Skipping non-executable: $f"
            fi
          done
          
      - name: Set version                   # Set version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          fi

      - name: Package files                 # Packages binaries as .zip (Windows) or .tar.gz (Linux/macOS)
        run: |
          # Use release version from input or tag
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF_NAME}"
          fi
          
          cd publish/${{ matrix.runtime }}
          if [[ "${{ matrix.runtime }}" == "win-x64" ]]; then
            zip -r ../../SubtitleTools-${VERSION}-${{ matrix.runtime }}.zip .
          else
            tar -czf ../../SubtitleTools-${VERSION}-${{ matrix.runtime }}.tar.gz .
          fi

      - name: Upload artifacts              # Upload packaged files for release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runtime }}
          path: |
            *.zip
            *.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: build        # Wait for build job to finish
    permissions:
      contents: write   # Allow publishing a release
    steps:
      - name: Set version for release                   # Set version for releaase - from manual input or Git tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          fi

      - name: Download all artifacts                    # Download artifacts from build job
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Flatten artifacts                         # Collects all build outputs into a single folder
        run: |
          mkdir -p release-files
          find ./artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} release-files/ \;
          ls -la release-files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}             # Release tag
          name: SubtitleTools ${{ env.VERSION }}   # Release title
          files: release-files/*                   # Attach packaged binaries
          generate_release_notes: true             # Auto-generate release notes
          draft: false                             # Whether the release should be a draft (unpublished). false = published immediately
          prerelease: false                        # Whether the release is a pre-release (e.g., beta/RC). false = normal release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Auth token for release
